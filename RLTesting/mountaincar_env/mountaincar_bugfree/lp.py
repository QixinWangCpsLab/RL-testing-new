import re

# 假设log_data是包含了上述数组的字符串
log_data = """
[(array([-0.5271245,  0.       ], dtype=float32), array([0.522864], dtype=float32)), (array([-0.5263138 ,  0.00081074], dtype=float32), array([0.41045237], dtype=float32)), (array([-0.524867  ,  0.00144678], dtype=float32), array([-0.48816222], dtype=float32)), (array([-0.5241429 ,  0.00072405], dtype=float32), array([0.88077366], dtype=float32)), (array([-0.52209365,  0.00204929], dtype=float32), array([-0.94023293], dtype=float32)), (array([-0.521466  ,  0.00062765], dtype=float32), array([-0.2698623], dtype=float32)), (array([-5.2125913e-01,  2.0686237e-04], dtype=float32), array([0.10077536], dtype=float32)), (array([-5.2091867e-01,  3.4047820e-04], dtype=float32), array([0.9241514], dtype=float32)), (array([-0.51921207,  0.0017066 ], dtype=float32), array([0.94050145], dtype=float32)), (array([-0.5161276 ,  0.00308446], dtype=float32), array([0.15408492], dtype=float32)), (array([-0.51286805,  0.00325956], dtype=float32), array([0.04120302], dtype=float32)), (array([-0.50962716,  0.00324089], dtype=float32), array([-0.01050502], dtype=float32)), (array([-0.5065068 ,  0.00312038], dtype=float32), array([-0.9848199], dtype=float32)), (array([-0.50499177,  0.00151502], dtype=float32), array([0.8871199], dtype=float32)), (array([-0.50228554,  0.00270622], dtype=float32), array([-0.23470873], dtype=float32)), (array([-0.50009114,  0.00219441], dtype=float32), array([-0.3205374], dtype=float32)), (array([-0.4985537 ,  0.00153745], dtype=float32), array([-0.9413026], dtype=float32)), (array([-4.9861586e-01, -6.2170096e-05], dtype=float32), array([-0.5469079], dtype=float32)), (array([-0.4996856 , -0.00106973], dtype=float32), array([-0.24212974], dtype=float32)), (array([-0.5012977 , -0.00161212], dtype=float32), array([-0.29347062], dtype=float32)), (array([-0.50351715, -0.00221946], dtype=float32), array([0.11292672], dtype=float32)), (array([-0.50571775, -0.00220059], dtype=float32), array([-0.46704602], dtype=float32)), (array([-0.50875294, -0.0030352 ], dtype=float32), array([0.5166967], dtype=float32)), (array([-0.51112443, -0.00237146], dtype=float32), array([0.9375801], dtype=float32)), (array([-0.51218307, -0.00105863], dtype=float32), array([0.5345079], dtype=float32)), (array([-5.1252556e-01, -3.4246733e-04], dtype=float32), array([-0.25586832], dtype=float32)), (array([-0.5133349, -0.0008093], dtype=float32), array([-0.2183783], dtype=float32)), (array([-0.5145487 , -0.00121384], dtype=float32), array([-0.91258156], dtype=float32)), (array([-0.5171993 , -0.00265058], dtype=float32), array([0.18317246], dtype=float32)), (array([-0.5196231 , -0.00242381], dtype=float32), array([-0.30090487], dtype=float32)), (array([-0.5225281 , -0.00290499], dtype=float32), array([0.6207526], dtype=float32)), (array([-0.52451   , -0.00198189], dtype=float32), array([-0.9408815], dtype=float32)), (array([-0.5278964 , -0.00338638], dtype=float32), array([0.71920216], dtype=float32)), (array([-0.53017175, -0.00227534], dtype=float32), array([0.60200834], dtype=float32)), (array([-0.5314948 , -0.00132303], dtype=float32), array([0.33427095], dtype=float32)), (array([-0.5322572 , -0.00076241], dtype=float32), array([0.9493015], dtype=float32)), (array([-0.53153074,  0.00072647], dtype=float32), array([0.7434108], dtype=float32)), (array([-0.52962965,  0.00190107], dtype=float32), array([-0.07231778], dtype=float32)), (array([-0.5277918 ,  0.00183782], dtype=float32), array([0.25965762], dtype=float32)), (array([-0.525533  ,  0.00225876], dtype=float32), array([0.72679424], dtype=float32)), (array([-0.5221696 ,  0.00336345], dtype=float32), array([-0.7238312], dtype=float32)), (array([-0.5199026 ,  0.00226699], dtype=float32), array([0.95045996], dtype=float32)), (array([-0.5162376 ,  0.00366496], dtype=float32), array([-0.8855914], dtype=float32)), (array([-0.51395625,  0.00228137], dtype=float32), array([-0.4043039], dtype=float32)), (array([-0.51235366,  0.0016026 ], dtype=float32), array([0.43762898], dtype=float32)), (array([-0.5101789 ,  0.00217472], dtype=float32), array([-0.74941635], dtype=float32)), (array([-0.50922894,  0.00094998], dtype=float32), array([0.45610917], dtype=float32)), (array([-0.5077025,  0.0015264], dtype=float32), array([-0.87784475], dtype=float32)), (array([-5.0761205e-01,  9.0456539e-05], dtype=float32), array([-0.36823606], dtype=float32)), (array([-0.5081938 , -0.00058175], dtype=float32), array([0.9605156], dtype=float32)), (array([-0.5074503 ,  0.00074353], dtype=float32), array([0.9213258], dtype=float32)), (array([-0.50544584,  0.00200445], dtype=float32), array([0.18407452], dtype=float32)), (array([-0.5033014 ,  0.00214448], dtype=float32), array([0.9354656], dtype=float32)), (array([-0.49990585,  0.00339554], dtype=float32), array([0.18679404], dtype=float32)), (array([-0.49640766,  0.00349819], dtype=float32), array([0.6710876], dtype=float32)), (array([-0.49210656,  0.00430111], dtype=float32), array([0.05782795], dtype=float32)), (array([-0.48795456,  0.00415201], dtype=float32), array([0.9817456], dtype=float32)), (array([-0.48259676,  0.00535781], dtype=float32), array([-0.40835595], dtype=float32)), (array([-0.47815824,  0.00443853], dtype=float32), array([-0.17373818], dtype=float32)), (array([-0.47432005,  0.00383818], dtype=float32), array([-0.80304736], dtype=float32)), (array([-0.4720547 ,  0.00226536], dtype=float32), array([0.8396776], dtype=float32)), (array([-0.46891487,  0.00313983], dtype=float32), array([-0.5851786], dtype=float32)), (array([-0.4670611 ,  0.00185377], dtype=float32), array([-0.9724065], dtype=float32)), (array([-4.6708795e-01, -2.6838725e-05], dtype=float32), array([0.03718543], dtype=float32)), (array([-4.674808e-01, -3.928644e-04], dtype=float32), array([-0.5686684], dtype=float32)), (array([-0.46914557, -0.00166477], dtype=float32), array([0.358958], dtype=float32)), (array([-0.47067848, -0.00153291], dtype=float32), array([0.9057665], dtype=float32)), (array([-0.47124797, -0.0005695 ], dtype=float32), array([0.83209753], dtype=float32)), (array([-4.7096035e-01,  2.8762562e-04], dtype=float32), array([-0.18895489], dtype=float32)), (array([-4.7134930e-01, -3.8895613e-04], dtype=float32), array([-0.46560454], dtype=float32)), (array([-0.47282693, -0.00147763], dtype=float32), array([-0.8441572], dtype=float32)), (array([-0.47595012, -0.00312319], dtype=float32), array([0.2634318], dtype=float32)), (array([-0.4790343 , -0.00308419], dtype=float32), array([-0.00688553], dtype=float32)), (array([-0.48246205, -0.00342775], dtype=float32), array([0.26226556], dtype=float32)), (array([-0.48580414, -0.0033421 ], dtype=float32), array([0.6809268], dtype=float32)), (array([-0.4884077 , -0.00260356], dtype=float32), array([0.2015717], dtype=float32)), (array([-0.49097234, -0.00256465], dtype=float32), array([-0.5960382], dtype=float32)), (array([-0.49467534, -0.00370301], dtype=float32), array([-0.35976374], dtype=float32)), (array([-0.49913466, -0.00445931], dtype=float32), array([-0.28706747], dtype=float32)), (array([-0.5042079 , -0.00507323], dtype=float32), array([-0.755809], dtype=float32)), (array([-0.5105602 , -0.00635229], dtype=float32), array([-0.9909611], dtype=float32)), (array([-0.5184967, -0.0079365], dtype=float32), array([0.15250337], dtype=float32)), (array([-0.5262427 , -0.00774601], dtype=float32), array([0.9135151], dtype=float32)), (array([-0.53259856, -0.0063559 ], dtype=float32), array([-0.21694964], dtype=float32)), (array([-0.5392124 , -0.00661384], dtype=float32), array([0.9639025], dtype=float32)), (array([-0.5442633 , -0.00505093], dtype=float32), array([0.11306405], dtype=float32)), (array([-0.5489898 , -0.00472645], dtype=float32), array([-0.9488727], dtype=float32)), (array([-0.5549493 , -0.00595951], dtype=float32), array([-0.96996236], dtype=float32)), (array([-0.56212896, -0.00717967], dtype=float32), array([0.41937494], dtype=float32)), (array([-0.5683912 , -0.00626227], dtype=float32), array([-0.8453866], dtype=float32)), (array([-0.5755866 , -0.00719542], dtype=float32), array([-0.31299782], dtype=float32)), (array([-0.5828632 , -0.00727659], dtype=float32), array([0.33986378], dtype=float32)), (array([-0.58918786, -0.00632464], dtype=float32), array([-0.98880106], dtype=float32)), (array([-0.59650695, -0.0073191 ], dtype=float32), array([0.55883884], dtype=float32)), (array([-0.6024453 , -0.00593838], dtype=float32), array([-0.7894434], dtype=float32)), (array([-0.60898197, -0.00653669], dtype=float32), array([0.6176896], dtype=float32)), (array([-0.6139587 , -0.00497676], dtype=float32), array([-0.79076207], dtype=float32)), (array([-0.6194522 , -0.00549348], dtype=float32), array([0.0488261], dtype=float32)), (array([-0.6241634, -0.0047112], dtype=float32), array([0.35534883], dtype=float32)), (array([-0.6275987 , -0.00343533], dtype=float32), array([0.4201641], dtype=float32)), (array([-0.6296364 , -0.00203768], dtype=float32), array([-0.6305248], dtype=float32)), (array([-0.63183796, -0.00220153], dtype=float32), array([0.9912925], dtype=float32)), (array([-6.3175493e-01,  8.3008810e-05], dtype=float32), array([-0.24608469], dtype=float32)), (array([-6.3124406e-01,  5.1089440e-04], dtype=float32), array([0.72865844], dtype=float32)), (array([-0.6288468 ,  0.00239726], dtype=float32), array([-0.01547956], dtype=float32)), (array([-0.6256965 ,  0.00315035], dtype=float32), array([-0.31763017], dtype=float32)), (array([-0.62226874,  0.00342772], dtype=float32), array([-0.33294094], dtype=float32)), (array([-0.61861116,  0.00365758], dtype=float32), array([0.9277983], dtype=float32)), (array([-0.6128589 ,  0.00575226], dtype=float32), array([-0.46268177], dtype=float32)), (array([-0.60713917,  0.00571971], dtype=float32), array([-0.11215687], dtype=float32)), (array([-0.6009677 ,  0.00617149], dtype=float32), array([0.8262309], dtype=float32)), (array([-0.5929818 ,  0.00798591], dtype=float32), array([-0.86289734], dtype=float32)), (array([-0.58577365,  0.00720819], dtype=float32), array([-0.7418196], dtype=float32)), (array([-0.5792146 ,  0.00655907], dtype=float32), array([-0.9057817], dtype=float32)), (array([-0.573599  ,  0.00561558], dtype=float32), array([-0.8020426], dtype=float32)), (array([-0.56881285,  0.00478612], dtype=float32), array([0.7658708], dtype=float32)), (array([-0.5625399 ,  0.00627299], dtype=float32), array([0.66780186], dtype=float32)), (array([-0.5549738 ,  0.00756609], dtype=float32), array([0.6910963], dtype=float32)), (array([-0.5461361,  0.0088377], dtype=float32), array([-0.84411126], dtype=float32)), (array([-0.53839564,  0.00774043], dtype=float32), array([-0.45572448], dtype=float32)), (array([-0.5312279 ,  0.00716778], dtype=float32), array([0.678561], dtype=float32)), (array([-0.52298504,  0.00824284], dtype=float32), array([0.5039699], dtype=float32)), (array([-0.5139909 ,  0.00899419], dtype=float32), array([0.74772334], dtype=float32)), (array([-0.50394714,  0.01004373], dtype=float32), array([0.98490965], dtype=float32)), (array([-0.49257335,  0.01137379], dtype=float32), array([0.39286208], dtype=float32)), (array([-0.48084262,  0.01173073], dtype=float32), array([0.7142364], dtype=float32)), (array([-0.46836033,  0.01248229], dtype=float32), array([-0.31915438], dtype=float32)), (array([-0.45676917,  0.01159116], dtype=float32), array([0.39987016], dtype=float32)), (array([-0.44507608,  0.0116931 ], dtype=float32), array([0.11877441], dtype=float32)), (array([-0.4337883 ,  0.01128777], dtype=float32), array([-0.5759497], dtype=float32)), (array([-0.42402992,  0.00975839], dtype=float32), array([0.74218345], dtype=float32)), (array([-0.41389397,  0.01013595], dtype=float32), array([-0.6306413], dtype=float32)), (array([-0.40551198,  0.00838198], dtype=float32), array([0.759153], dtype=float32)), (array([-0.3968585 ,  0.00865347], dtype=float32), array([-0.03709549], dtype=float32)), (array([-0.3891885 ,  0.00767001], dtype=float32), array([-0.6811883], dtype=float32)), (array([-0.38352126,  0.00566725], dtype=float32), array([0.46718323], dtype=float32)), (array([-0.37817317,  0.00534809], dtype=float32), array([-0.87612176], dtype=float32)), (array([-0.37519568,  0.00297749], dtype=float32), array([-0.9273002], dtype=float32)), (array([-0.37468576,  0.00050992], dtype=float32), array([-0.01166493], dtype=float32)), (array([-0.3752734 , -0.00058765], dtype=float32), array([-0.43873394], dtype=float32)), (array([-0.37759525, -0.00232184], dtype=float32), array([-0.36419523], dtype=float32)), (array([-0.38152373, -0.00392848], dtype=float32), array([-0.7700731], dtype=float32)), (array([-0.3876409 , -0.00611718], dtype=float32), array([0.09510994], dtype=float32)), (array([-0.39460707, -0.00696616], dtype=float32), array([0.16654694], dtype=float32)), (array([-0.4022669 , -0.00765981], dtype=float32), array([-0.13330054], dtype=float32)), (array([-0.41101667, -0.00874979], dtype=float32), array([-0.05456889], dtype=float32)), (array([-0.4206767 , -0.00966005], dtype=float32), array([-0.47026932], dtype=float32)), (array([-0.43180186, -0.01112516], dtype=float32), array([0.63520145], dtype=float32)), (array([-0.442654  , -0.01085216], dtype=float32), array([-0.3037175], dtype=float32)), (array([-0.4545629 , -0.01190888], dtype=float32), array([0.8499005], dtype=float32)), (array([-0.465711 , -0.0111481], dtype=float32), array([0.1871779], dtype=float32)), (array([-0.4770103 , -0.01129931], dtype=float32), array([-0.79128975], dtype=float32)), (array([-0.48984483, -0.01283453], dtype=float32), array([-0.6414938], dtype=float32)), (array([-0.5038943 , -0.01404949], dtype=float32), array([0.26284766], dtype=float32)), (array([-0.5176972 , -0.01380291], dtype=float32), array([-0.33553827], dtype=float32)), (array([-0.5320477 , -0.01435048], dtype=float32), array([0.19145155], dtype=float32)), (array([-0.5460476 , -0.01399994], dtype=float32), array([-0.78790766], dtype=float32)), (array([-0.5610612 , -0.01501357], dtype=float32), array([0.4389882], dtype=float32)), (array([-0.5751359 , -0.01407471], dtype=float32), array([0.56014395], dtype=float32)), (array([-0.5879854, -0.0128495], dtype=float32), array([-0.90232533], dtype=float32)), (array([-0.6017085 , -0.01372309], dtype=float32), array([0.4597025], dtype=float32)), (array([-0.61416155, -0.01245306], dtype=float32), array([-0.22248119], dtype=float32)), (array([-0.62627745, -0.01211588], dtype=float32), array([-0.5093707], dtype=float32)), (array([-0.6383994 , -0.01212197], dtype=float32), array([0.6277045], dtype=float32)), (array([-0.64873576, -0.01033633], dtype=float32), array([-0.7986861], dtype=float32)), (array([-0.6593535 , -0.01061772], dtype=float32), array([-0.5556029], dtype=float32)), (array([-0.66981435, -0.01046088], dtype=float32), array([-0.6292089], dtype=float32)), (array([-0.68015724, -0.0103429 ], dtype=float32), array([-0.30715287], dtype=float32)), (array([-0.6898294 , -0.00967214], dtype=float32), array([-0.9680542], dtype=float32)), (array([-0.69975793, -0.00992853], dtype=float32), array([0.7902883], dtype=float32)), (array([-0.70724046, -0.00748255], dtype=float32), array([-0.1601739], dtype=float32)), (array([-0.7136546 , -0.00641412], dtype=float32), array([0.80453277], dtype=float32)), (array([-0.7175125 , -0.00385789], dtype=float32), array([-0.9553546], dtype=float32)), (array([-0.7214297 , -0.00391722], dtype=float32), array([0.69566894], dtype=float32)), (array([-0.7229053 , -0.00147557], dtype=float32), array([0.79047954], dtype=float32)), (array([-0.7217878 ,  0.00111746], dtype=float32), array([-0.3999884], dtype=float32)), (array([-0.71987   ,  0.00191785], dtype=float32), array([0.75857115], dtype=float32)), (array([-0.71542585,  0.00444415], dtype=float32), array([0.90694785], dtype=float32)), (array([-0.70826066,  0.00716517], dtype=float32), array([0.6514547], dtype=float32)), (array([-0.6988031 ,  0.00945755], dtype=float32), array([-0.05284822], dtype=float32)), (array([-0.6881705 ,  0.01063264], dtype=float32), array([0.96655416], dtype=float32)), (array([-0.6749033 ,  0.01326722], dtype=float32), array([0.6512115], dtype=float32)), (array([-0.659563  ,  0.01534025], dtype=float32), array([0.7638166], dtype=float32)), (array([-0.6420853 ,  0.01747767], dtype=float32), array([0.8867407], dtype=float32)), (array([-0.6224075 ,  0.01967783], dtype=float32), array([0.06345081], dtype=float32)), (array([-0.6019042 ,  0.02050327], dtype=float32), array([-0.71585363], dtype=float32)), (array([-0.58189285,  0.02001139], dtype=float32), array([0.6638138], dtype=float32)), (array([-0.56045073,  0.02144209], dtype=float32), array([-0.57430255], dtype=float32)), (array([-0.5395943 ,  0.02085647], dtype=float32), array([0.1802553], dtype=float32)), (array([-0.5183475 ,  0.02124677], dtype=float32), array([0.6129062], dtype=float32)), (array([-0.49622077,  0.02212675], dtype=float32), array([-0.3350222], dtype=float32)), (array([-0.47480166,  0.02141911], dtype=float32), array([-0.6760971], dtype=float32)), (array([-0.45476136,  0.02004029], dtype=float32), array([0.6742338], dtype=float32)), (array([-0.43422234,  0.02053902], dtype=float32), array([0.04994142], dtype=float32)), (array([-0.41427073,  0.01995162], dtype=float32), array([0.3522284], dtype=float32)), (array([-0.3945961 ,  0.01967462], dtype=float32), array([0.2704327], dtype=float32)), (array([-0.37545937,  0.01913672], dtype=float32), array([-0.44450188], dtype=float32)), (array([-0.35806423,  0.01739514], dtype=float32), array([0.88208425], dtype=float32)), (array([-0.34053707,  0.01752716], dtype=float32), array([0.09044111], dtype=float32)), (array([-0.32417923,  0.01635784], dtype=float32), array([0.9394345], dtype=float32))]
"""

# 正则表达式匹配键和值
pattern = r"array\(\[(.*?),\s+(.*?)\],\s+dtype=float32\),\s+array\(\[(.*?)\],\s+dtype=float32\)"


# 使用正则表达式查找所有匹配项
matches = re.findall(pattern, log_data)

# 将匹配项转换成字典
result_dict = {tuple(map(float, match[:2])): float(match[2]) for match in matches}

print(result_dict)